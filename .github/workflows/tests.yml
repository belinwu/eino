name: EinoTests

on: [ push, pull_request ]

jobs:
  unit_test:
    name: "eino unit test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Go"
        uses: actions/setup-go@v5
        with:
          go-version: "1.18"
      - name: "GoTest"
        run: |
          modules=`find . -name "go.mod" -exec dirname {} \;`
          echo $modules
          list=""
          coverpkg=""
          if [[ ! -f "go.work" ]];then go work init;fi
          for module in $modules; do go work use $module; list=$module"/... "$list; coverpkg=$module"/...,"$coverpkg; done
          go work sync
          go test -race -coverprofile=coverage.out -gcflags="all=-l -N" -coverpkg=$coverpkg $list

      - name: "Test Coverage"
        uses: vladopajic/go-test-coverage@v2
        with:
          profile: coverage.out
          threshold-total: 75
  unit-benchmark-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Unit Test
        run: go test -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Benchmark
        run: go test -bench=. -benchmem -run=none ./...

  compatibility-test:
    strategy:
      matrix:
        go: [ "1.18", "1.19", "1.20", "1.21", "1.22" ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true # don't use cache for self-hosted runners
      - name: Unit Test
        run: go test -race -covermode=atomic ./...